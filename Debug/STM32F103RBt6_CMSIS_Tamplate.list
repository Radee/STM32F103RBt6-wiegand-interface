
STM32F103RBt6_CMSIS_Tamplate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000095c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000a68  08000a68  00010a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a78  08000a78  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08000a78  08000a78  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a78  08000a78  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a78  08000a78  00010a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a7c  08000a7c  00010a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08000a80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000008  08000a88  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000048  08000a88  00020048  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000220c  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000008a2  00000000  00000000  0002223d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000188  00000000  00000000  00022ae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000120  00000000  00000000  00022c68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000102dd  00000000  00000000  00022d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001d0f  00000000  00000000  00033065  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000546db  00000000  00000000  00034d74  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0008944f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000418  00000000  00000000  000894cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000008 	.word	0x20000008
 8000128:	00000000 	.word	0x00000000
 800012c:	08000a50 	.word	0x08000a50

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000000c 	.word	0x2000000c
 8000148:	08000a50 	.word	0x08000a50

0800014c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000150:	4b15      	ldr	r3, [pc, #84]	; (80001a8 <SystemInit+0x5c>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a14      	ldr	r2, [pc, #80]	; (80001a8 <SystemInit+0x5c>)
 8000156:	f043 0301 	orr.w	r3, r3, #1
 800015a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800015c:	4b12      	ldr	r3, [pc, #72]	; (80001a8 <SystemInit+0x5c>)
 800015e:	685a      	ldr	r2, [r3, #4]
 8000160:	4911      	ldr	r1, [pc, #68]	; (80001a8 <SystemInit+0x5c>)
 8000162:	4b12      	ldr	r3, [pc, #72]	; (80001ac <SystemInit+0x60>)
 8000164:	4013      	ands	r3, r2
 8000166:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000168:	4b0f      	ldr	r3, [pc, #60]	; (80001a8 <SystemInit+0x5c>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	4a0e      	ldr	r2, [pc, #56]	; (80001a8 <SystemInit+0x5c>)
 800016e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000176:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000178:	4b0b      	ldr	r3, [pc, #44]	; (80001a8 <SystemInit+0x5c>)
 800017a:	681b      	ldr	r3, [r3, #0]
 800017c:	4a0a      	ldr	r2, [pc, #40]	; (80001a8 <SystemInit+0x5c>)
 800017e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000182:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000184:	4b08      	ldr	r3, [pc, #32]	; (80001a8 <SystemInit+0x5c>)
 8000186:	685b      	ldr	r3, [r3, #4]
 8000188:	4a07      	ldr	r2, [pc, #28]	; (80001a8 <SystemInit+0x5c>)
 800018a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800018e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000190:	4b05      	ldr	r3, [pc, #20]	; (80001a8 <SystemInit+0x5c>)
 8000192:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000196:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <SystemInit+0x64>)
 800019a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800019e:	609a      	str	r2, [r3, #8]
#endif 
}
 80001a0:	bf00      	nop
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr
 80001a8:	40021000 	.word	0x40021000
 80001ac:	f8ff0000 	.word	0xf8ff0000
 80001b0:	e000ed00 	.word	0xe000ed00

080001b4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 80001b4:	b480      	push	{r7}
 80001b6:	b085      	sub	sp, #20
 80001b8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, pllmull = 0U, pllsource = 0U;
 80001ba:	2300      	movs	r3, #0
 80001bc:	60fb      	str	r3, [r7, #12]
 80001be:	2300      	movs	r3, #0
 80001c0:	60bb      	str	r3, [r7, #8]
 80001c2:	2300      	movs	r3, #0
 80001c4:	607b      	str	r3, [r7, #4]
#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80001c6:	4b2c      	ldr	r3, [pc, #176]	; (8000278 <SystemCoreClockUpdate+0xc4>)
 80001c8:	685b      	ldr	r3, [r3, #4]
 80001ca:	f003 030c 	and.w	r3, r3, #12
 80001ce:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 80001d0:	68fb      	ldr	r3, [r7, #12]
 80001d2:	2b04      	cmp	r3, #4
 80001d4:	d007      	beq.n	80001e6 <SystemCoreClockUpdate+0x32>
 80001d6:	2b08      	cmp	r3, #8
 80001d8:	d009      	beq.n	80001ee <SystemCoreClockUpdate+0x3a>
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d133      	bne.n	8000246 <SystemCoreClockUpdate+0x92>
  {
    case 0x00U:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80001de:	4b27      	ldr	r3, [pc, #156]	; (800027c <SystemCoreClockUpdate+0xc8>)
 80001e0:	4a27      	ldr	r2, [pc, #156]	; (8000280 <SystemCoreClockUpdate+0xcc>)
 80001e2:	601a      	str	r2, [r3, #0]
      break;
 80001e4:	e033      	b.n	800024e <SystemCoreClockUpdate+0x9a>
    case 0x04U:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80001e6:	4b25      	ldr	r3, [pc, #148]	; (800027c <SystemCoreClockUpdate+0xc8>)
 80001e8:	4a25      	ldr	r2, [pc, #148]	; (8000280 <SystemCoreClockUpdate+0xcc>)
 80001ea:	601a      	str	r2, [r3, #0]
      break;
 80001ec:	e02f      	b.n	800024e <SystemCoreClockUpdate+0x9a>
    case 0x08U:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80001ee:	4b22      	ldr	r3, [pc, #136]	; (8000278 <SystemCoreClockUpdate+0xc4>)
 80001f0:	685b      	ldr	r3, [r3, #4]
 80001f2:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80001f6:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80001f8:	4b1f      	ldr	r3, [pc, #124]	; (8000278 <SystemCoreClockUpdate+0xc4>)
 80001fa:	685b      	ldr	r3, [r3, #4]
 80001fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000200:	607b      	str	r3, [r7, #4]
      
#if !defined(STM32F105xC) && !defined(STM32F107xC)      
      pllmull = ( pllmull >> 18U) + 2U;
 8000202:	68bb      	ldr	r3, [r7, #8]
 8000204:	0c9b      	lsrs	r3, r3, #18
 8000206:	3302      	adds	r3, #2
 8000208:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00U)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d106      	bne.n	800021e <SystemCoreClockUpdate+0x6a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 8000210:	68bb      	ldr	r3, [r7, #8]
 8000212:	4a1c      	ldr	r2, [pc, #112]	; (8000284 <SystemCoreClockUpdate+0xd0>)
 8000214:	fb02 f303 	mul.w	r3, r2, r3
 8000218:	4a18      	ldr	r2, [pc, #96]	; (800027c <SystemCoreClockUpdate+0xc8>)
 800021a:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F105xC */ 
      break;
 800021c:	e017      	b.n	800024e <SystemCoreClockUpdate+0x9a>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 800021e:	4b16      	ldr	r3, [pc, #88]	; (8000278 <SystemCoreClockUpdate+0xc4>)
 8000220:	685b      	ldr	r3, [r3, #4]
 8000222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000226:	2b00      	cmp	r3, #0
 8000228:	d006      	beq.n	8000238 <SystemCoreClockUpdate+0x84>
          SystemCoreClock = (HSE_VALUE >> 1U) * pllmull;
 800022a:	68bb      	ldr	r3, [r7, #8]
 800022c:	4a15      	ldr	r2, [pc, #84]	; (8000284 <SystemCoreClockUpdate+0xd0>)
 800022e:	fb02 f303 	mul.w	r3, r2, r3
 8000232:	4a12      	ldr	r2, [pc, #72]	; (800027c <SystemCoreClockUpdate+0xc8>)
 8000234:	6013      	str	r3, [r2, #0]
      break;
 8000236:	e00a      	b.n	800024e <SystemCoreClockUpdate+0x9a>
          SystemCoreClock = HSE_VALUE * pllmull;
 8000238:	68bb      	ldr	r3, [r7, #8]
 800023a:	4a11      	ldr	r2, [pc, #68]	; (8000280 <SystemCoreClockUpdate+0xcc>)
 800023c:	fb02 f303 	mul.w	r3, r2, r3
 8000240:	4a0e      	ldr	r2, [pc, #56]	; (800027c <SystemCoreClockUpdate+0xc8>)
 8000242:	6013      	str	r3, [r2, #0]
      break;
 8000244:	e003      	b.n	800024e <SystemCoreClockUpdate+0x9a>

    default:
      SystemCoreClock = HSI_VALUE;
 8000246:	4b0d      	ldr	r3, [pc, #52]	; (800027c <SystemCoreClockUpdate+0xc8>)
 8000248:	4a0d      	ldr	r2, [pc, #52]	; (8000280 <SystemCoreClockUpdate+0xcc>)
 800024a:	601a      	str	r2, [r3, #0]
      break;
 800024c:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800024e:	4b0a      	ldr	r3, [pc, #40]	; (8000278 <SystemCoreClockUpdate+0xc4>)
 8000250:	685b      	ldr	r3, [r3, #4]
 8000252:	091b      	lsrs	r3, r3, #4
 8000254:	f003 030f 	and.w	r3, r3, #15
 8000258:	4a0b      	ldr	r2, [pc, #44]	; (8000288 <SystemCoreClockUpdate+0xd4>)
 800025a:	5cd3      	ldrb	r3, [r2, r3]
 800025c:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 800025e:	4b07      	ldr	r3, [pc, #28]	; (800027c <SystemCoreClockUpdate+0xc8>)
 8000260:	681a      	ldr	r2, [r3, #0]
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	fa22 f303 	lsr.w	r3, r2, r3
 8000268:	4a04      	ldr	r2, [pc, #16]	; (800027c <SystemCoreClockUpdate+0xc8>)
 800026a:	6013      	str	r3, [r2, #0]
}
 800026c:	bf00      	nop
 800026e:	3714      	adds	r7, #20
 8000270:	46bd      	mov	sp, r7
 8000272:	bc80      	pop	{r7}
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	40021000 	.word	0x40021000
 800027c:	20000000 	.word	0x20000000
 8000280:	007a1200 	.word	0x007a1200
 8000284:	003d0900 	.word	0x003d0900
 8000288:	08000a68 	.word	0x08000a68

0800028c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800028c:	b480      	push	{r7}
 800028e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000290:	4b04      	ldr	r3, [pc, #16]	; (80002a4 <__NVIC_GetPriorityGrouping+0x18>)
 8000292:	68db      	ldr	r3, [r3, #12]
 8000294:	0a1b      	lsrs	r3, r3, #8
 8000296:	f003 0307 	and.w	r3, r3, #7
}
 800029a:	4618      	mov	r0, r3
 800029c:	46bd      	mov	sp, r7
 800029e:	bc80      	pop	{r7}
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	e000ed00 	.word	0xe000ed00

080002a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	4603      	mov	r3, r0
 80002b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	db0b      	blt.n	80002d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002ba:	79fb      	ldrb	r3, [r7, #7]
 80002bc:	f003 021f 	and.w	r2, r3, #31
 80002c0:	4906      	ldr	r1, [pc, #24]	; (80002dc <__NVIC_EnableIRQ+0x34>)
 80002c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c6:	095b      	lsrs	r3, r3, #5
 80002c8:	2001      	movs	r0, #1
 80002ca:	fa00 f202 	lsl.w	r2, r0, r2
 80002ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002d2:	bf00      	nop
 80002d4:	370c      	adds	r7, #12
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bc80      	pop	{r7}
 80002da:	4770      	bx	lr
 80002dc:	e000e100 	.word	0xe000e100

080002e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b083      	sub	sp, #12
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	4603      	mov	r3, r0
 80002e8:	6039      	str	r1, [r7, #0]
 80002ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	db0a      	blt.n	800030a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f4:	683b      	ldr	r3, [r7, #0]
 80002f6:	b2da      	uxtb	r2, r3
 80002f8:	490c      	ldr	r1, [pc, #48]	; (800032c <__NVIC_SetPriority+0x4c>)
 80002fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002fe:	0112      	lsls	r2, r2, #4
 8000300:	b2d2      	uxtb	r2, r2
 8000302:	440b      	add	r3, r1
 8000304:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000308:	e00a      	b.n	8000320 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800030a:	683b      	ldr	r3, [r7, #0]
 800030c:	b2da      	uxtb	r2, r3
 800030e:	4908      	ldr	r1, [pc, #32]	; (8000330 <__NVIC_SetPriority+0x50>)
 8000310:	79fb      	ldrb	r3, [r7, #7]
 8000312:	f003 030f 	and.w	r3, r3, #15
 8000316:	3b04      	subs	r3, #4
 8000318:	0112      	lsls	r2, r2, #4
 800031a:	b2d2      	uxtb	r2, r2
 800031c:	440b      	add	r3, r1
 800031e:	761a      	strb	r2, [r3, #24]
}
 8000320:	bf00      	nop
 8000322:	370c      	adds	r7, #12
 8000324:	46bd      	mov	sp, r7
 8000326:	bc80      	pop	{r7}
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	e000e100 	.word	0xe000e100
 8000330:	e000ed00 	.word	0xe000ed00

08000334 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000334:	b480      	push	{r7}
 8000336:	b089      	sub	sp, #36	; 0x24
 8000338:	af00      	add	r7, sp, #0
 800033a:	60f8      	str	r0, [r7, #12]
 800033c:	60b9      	str	r1, [r7, #8]
 800033e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	f003 0307 	and.w	r3, r3, #7
 8000346:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000348:	69fb      	ldr	r3, [r7, #28]
 800034a:	f1c3 0307 	rsb	r3, r3, #7
 800034e:	2b04      	cmp	r3, #4
 8000350:	bf28      	it	cs
 8000352:	2304      	movcs	r3, #4
 8000354:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000356:	69fb      	ldr	r3, [r7, #28]
 8000358:	3304      	adds	r3, #4
 800035a:	2b06      	cmp	r3, #6
 800035c:	d902      	bls.n	8000364 <NVIC_EncodePriority+0x30>
 800035e:	69fb      	ldr	r3, [r7, #28]
 8000360:	3b03      	subs	r3, #3
 8000362:	e000      	b.n	8000366 <NVIC_EncodePriority+0x32>
 8000364:	2300      	movs	r3, #0
 8000366:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000368:	f04f 32ff 	mov.w	r2, #4294967295
 800036c:	69bb      	ldr	r3, [r7, #24]
 800036e:	fa02 f303 	lsl.w	r3, r2, r3
 8000372:	43da      	mvns	r2, r3
 8000374:	68bb      	ldr	r3, [r7, #8]
 8000376:	401a      	ands	r2, r3
 8000378:	697b      	ldr	r3, [r7, #20]
 800037a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800037c:	f04f 31ff 	mov.w	r1, #4294967295
 8000380:	697b      	ldr	r3, [r7, #20]
 8000382:	fa01 f303 	lsl.w	r3, r1, r3
 8000386:	43d9      	mvns	r1, r3
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800038c:	4313      	orrs	r3, r2
         );
}
 800038e:	4618      	mov	r0, r3
 8000390:	3724      	adds	r7, #36	; 0x24
 8000392:	46bd      	mov	sp, r7
 8000394:	bc80      	pop	{r7}
 8000396:	4770      	bx	lr

08000398 <Gpio_Init>:
void Gpio_Init(void);

/* Functions -------------------------------------------------------------------------------------------*/
/*********************************************************************************************************/
void Gpio_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0

	__IO uint32_t tmpreg;

	// Enable PORTs clocking
	RCC->APB2ENR |= (RCC_APB2ENR_IOPAEN|RCC_APB2ENR_IOPCEN|RCC_APB2ENR_IOPDEN);
 800039e:	4b30      	ldr	r3, [pc, #192]	; (8000460 <Gpio_Init+0xc8>)
 80003a0:	699b      	ldr	r3, [r3, #24]
 80003a2:	4a2f      	ldr	r2, [pc, #188]	; (8000460 <Gpio_Init+0xc8>)
 80003a4:	f043 0334 	orr.w	r3, r3, #52	; 0x34
 80003a8:	6193      	str	r3, [r2, #24]
	tmpreg = (RCC->APB2ENR & (RCC_APB2ENR_IOPAEN|RCC_APB2ENR_IOPCEN|RCC_APB2ENR_IOPDEN));
 80003aa:	4b2d      	ldr	r3, [pc, #180]	; (8000460 <Gpio_Init+0xc8>)
 80003ac:	699b      	ldr	r3, [r3, #24]
 80003ae:	f003 0334 	and.w	r3, r3, #52	; 0x34
 80003b2:	607b      	str	r3, [r7, #4]
	(void)tmpreg;
 80003b4:	687b      	ldr	r3, [r7, #4]

	// Configure which pins are launching EXTIx_IRQHandler
	AFIO->EXTICR[0] |= (AFIO_EXTICR1_EXTI2_PC|AFIO_EXTICR1_EXTI3_PC);
 80003b6:	4b2b      	ldr	r3, [pc, #172]	; (8000464 <Gpio_Init+0xcc>)
 80003b8:	689b      	ldr	r3, [r3, #8]
 80003ba:	4a2a      	ldr	r2, [pc, #168]	; (8000464 <Gpio_Init+0xcc>)
 80003bc:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 80003c0:	6093      	str	r3, [r2, #8]

	// Enable interrupt and disable event as IRQ trigger
	EXTI->EMR &=~ (EXTI_IMR_IM2|EXTI_IMR_IM3);
 80003c2:	4b29      	ldr	r3, [pc, #164]	; (8000468 <Gpio_Init+0xd0>)
 80003c4:	685b      	ldr	r3, [r3, #4]
 80003c6:	4a28      	ldr	r2, [pc, #160]	; (8000468 <Gpio_Init+0xd0>)
 80003c8:	f023 030c 	bic.w	r3, r3, #12
 80003cc:	6053      	str	r3, [r2, #4]
	EXTI->IMR |= (EXTI_IMR_IM2|EXTI_IMR_IM3);
 80003ce:	4b26      	ldr	r3, [pc, #152]	; (8000468 <Gpio_Init+0xd0>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	4a25      	ldr	r2, [pc, #148]	; (8000468 <Gpio_Init+0xd0>)
 80003d4:	f043 030c 	orr.w	r3, r3, #12
 80003d8:	6013      	str	r3, [r2, #0]

	// Set falling edge as IRQ trigger
	EXTI->RTSR &=~ (EXTI_IMR_IM2|EXTI_IMR_IM3);
 80003da:	4b23      	ldr	r3, [pc, #140]	; (8000468 <Gpio_Init+0xd0>)
 80003dc:	689b      	ldr	r3, [r3, #8]
 80003de:	4a22      	ldr	r2, [pc, #136]	; (8000468 <Gpio_Init+0xd0>)
 80003e0:	f023 030c 	bic.w	r3, r3, #12
 80003e4:	6093      	str	r3, [r2, #8]
	EXTI->FTSR |= (EXTI_IMR_IM2|EXTI_IMR_IM3);
 80003e6:	4b20      	ldr	r3, [pc, #128]	; (8000468 <Gpio_Init+0xd0>)
 80003e8:	68db      	ldr	r3, [r3, #12]
 80003ea:	4a1f      	ldr	r2, [pc, #124]	; (8000468 <Gpio_Init+0xd0>)
 80003ec:	f043 030c 	orr.w	r3, r3, #12
 80003f0:	60d3      	str	r3, [r2, #12]

	// Set pull-up on EXTI-pins
	GPIOC->ODR |= 0x0CUL;
 80003f2:	4b1e      	ldr	r3, [pc, #120]	; (800046c <Gpio_Init+0xd4>)
 80003f4:	68db      	ldr	r3, [r3, #12]
 80003f6:	4a1d      	ldr	r2, [pc, #116]	; (800046c <Gpio_Init+0xd4>)
 80003f8:	f043 030c 	orr.w	r3, r3, #12
 80003fc:	60d3      	str	r3, [r2, #12]

	// Set pins as input
	GPIOC->CRL &= 0xFFFF00FFUL;
 80003fe:	4b1b      	ldr	r3, [pc, #108]	; (800046c <Gpio_Init+0xd4>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	4a1a      	ldr	r2, [pc, #104]	; (800046c <Gpio_Init+0xd4>)
 8000404:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000408:	6013      	str	r3, [r2, #0]
	GPIOC->CRL |= 0x8800UL;
 800040a:	4b18      	ldr	r3, [pc, #96]	; (800046c <Gpio_Init+0xd4>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	4a17      	ldr	r2, [pc, #92]	; (800046c <Gpio_Init+0xd4>)
 8000410:	f443 4308 	orr.w	r3, r3, #34816	; 0x8800
 8000414:	6013      	str	r3, [r2, #0]

	// Set priority grouping and enable EXTI_IRQ
	NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000416:	f7ff ff39 	bl	800028c <__NVIC_GetPriorityGrouping>
 800041a:	4603      	mov	r3, r0
 800041c:	2200      	movs	r2, #0
 800041e:	2100      	movs	r1, #0
 8000420:	4618      	mov	r0, r3
 8000422:	f7ff ff87 	bl	8000334 <NVIC_EncodePriority>
 8000426:	4603      	mov	r3, r0
 8000428:	4619      	mov	r1, r3
 800042a:	2008      	movs	r0, #8
 800042c:	f7ff ff58 	bl	80002e0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 8000430:	2008      	movs	r0, #8
 8000432:	f7ff ff39 	bl	80002a8 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000436:	f7ff ff29 	bl	800028c <__NVIC_GetPriorityGrouping>
 800043a:	4603      	mov	r3, r0
 800043c:	2200      	movs	r2, #0
 800043e:	2100      	movs	r1, #0
 8000440:	4618      	mov	r0, r3
 8000442:	f7ff ff77 	bl	8000334 <NVIC_EncodePriority>
 8000446:	4603      	mov	r3, r0
 8000448:	4619      	mov	r1, r3
 800044a:	2009      	movs	r0, #9
 800044c:	f7ff ff48 	bl	80002e0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI3_IRQn);
 8000450:	2009      	movs	r0, #9
 8000452:	f7ff ff29 	bl	80002a8 <__NVIC_EnableIRQ>

}
 8000456:	bf00      	nop
 8000458:	3708      	adds	r7, #8
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	40021000 	.word	0x40021000
 8000464:	40010000 	.word	0x40010000
 8000468:	40010400 	.word	0x40010400
 800046c:	40011000 	.word	0x40011000

08000470 <main>:
#include "main.h"

/*------------------------------------------------------------------------- MAIN ----------------------------------------------------------------------------------*/
/*********************************************************************************************************************************************************************/
int main(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
	/*-------system_init-------*/

	//	RCC initialization
	Rcc_Init();
 8000474:	f000 f89a 	bl	80005ac <Rcc_Init>
	//	GPIO initialization
	Gpio_Init();
 8000478:	f7ff ff8e 	bl	8000398 <Gpio_Init>
	//	TIM1 initialization
	Timer_Init();
 800047c:	f000 f9ae 	bl	80007dc <Timer_Init>

	/*-------functions-------*/

	BitePackageWaiting();
 8000480:	f000 fa58 	bl	8000934 <BitePackageWaiting>

	/*-------while_loop-------*/
	while(1)
 8000484:	e7fe      	b.n	8000484 <main+0x14>
	...

08000488 <TIM1_UP_IRQHandler>:
}

/* FUNCTIONS ----------------------------------------------------------------------------------------------------------------------------------------------------*/
/*********************************************************************************************************************************************************************/
void TIM1_UP_IRQHandler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
	//	Clear TIM_SR_UIF flag
	TIM1->SR &=~ TIM_SR_UIF;
 800048c:	4b0b      	ldr	r3, [pc, #44]	; (80004bc <TIM1_UP_IRQHandler+0x34>)
 800048e:	691b      	ldr	r3, [r3, #16]
 8000490:	4a0a      	ldr	r2, [pc, #40]	; (80004bc <TIM1_UP_IRQHandler+0x34>)
 8000492:	f023 0301 	bic.w	r3, r3, #1
 8000496:	6113      	str	r3, [r2, #16]

	// Check if initialization TIM1_UP_IRQHandler launch.
		// If not -  Clear vProcessing flag and set vBitePackageReceipt flag
	if(vSysInit)
 8000498:	4b09      	ldr	r3, [pc, #36]	; (80004c0 <TIM1_UP_IRQHandler+0x38>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b00      	cmp	r3, #0
 800049e:	d006      	beq.n	80004ae <TIM1_UP_IRQHandler+0x26>
			{	vProcessing = 0;		vBitePackageReceipt = 1;	}
 80004a0:	4b08      	ldr	r3, [pc, #32]	; (80004c4 <TIM1_UP_IRQHandler+0x3c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
 80004a6:	4b08      	ldr	r3, [pc, #32]	; (80004c8 <TIM1_UP_IRQHandler+0x40>)
 80004a8:	2201      	movs	r2, #1
 80004aa:	701a      	strb	r2, [r3, #0]
		else
				vSysInit = 1;

}
 80004ac:	e002      	b.n	80004b4 <TIM1_UP_IRQHandler+0x2c>
				vSysInit = 1;
 80004ae:	4b04      	ldr	r3, [pc, #16]	; (80004c0 <TIM1_UP_IRQHandler+0x38>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
}
 80004b4:	bf00      	nop
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr
 80004bc:	40012c00 	.word	0x40012c00
 80004c0:	20000026 	.word	0x20000026
 80004c4:	20000025 	.word	0x20000025
 80004c8:	20000024 	.word	0x20000024

080004cc <EXTI2_IRQHandler>:
/*-------------------------------------------------------------------------*/
/***************************************************************************/
void EXTI2_IRQHandler(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	//	Reset EXTI->PR->PR2 bite
	EXTI->PR = EXTI_IMR_IM2;
 80004d0:	4b05      	ldr	r3, [pc, #20]	; (80004e8 <EXTI2_IRQHandler+0x1c>)
 80004d2:	2204      	movs	r2, #4
 80004d4:	615a      	str	r2, [r3, #20]

	// Check if initialization EXTI2_IRQHandler launch.
			// If not - launch BitRecive().
	if(vSysInit)	BitRecive(DATA_0);
 80004d6:	4b05      	ldr	r3, [pc, #20]	; (80004ec <EXTI2_IRQHandler+0x20>)
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d002      	beq.n	80004e4 <EXTI2_IRQHandler+0x18>
 80004de:	2000      	movs	r0, #0
 80004e0:	f000 f9ec 	bl	80008bc <BitRecive>

}
 80004e4:	bf00      	nop
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	40010400 	.word	0x40010400
 80004ec:	20000026 	.word	0x20000026

080004f0 <EXTI3_IRQHandler>:
/*-------------------------------------------------------------------------*/
/***************************************************************************/
void EXTI3_IRQHandler(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	//	Reset EXTI->PR->PR3 bite
	EXTI->PR = EXTI_IMR_IM3;
 80004f4:	4b05      	ldr	r3, [pc, #20]	; (800050c <EXTI3_IRQHandler+0x1c>)
 80004f6:	2208      	movs	r2, #8
 80004f8:	615a      	str	r2, [r3, #20]

	// Check if initialization EXTI3_IRQHandler launch.
				// If not - launch BitRecive().
	if(vSysInit)	BitRecive(DATA_1);
 80004fa:	4b05      	ldr	r3, [pc, #20]	; (8000510 <EXTI3_IRQHandler+0x20>)
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d002      	beq.n	8000508 <EXTI3_IRQHandler+0x18>
 8000502:	2001      	movs	r0, #1
 8000504:	f000 f9da 	bl	80008bc <BitRecive>
}
 8000508:	bf00      	nop
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40010400 	.word	0x40010400
 8000510:	20000026 	.word	0x20000026

08000514 <__NVIC_SetPriority>:
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	6039      	str	r1, [r7, #0]
 800051e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000524:	2b00      	cmp	r3, #0
 8000526:	db0a      	blt.n	800053e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	b2da      	uxtb	r2, r3
 800052c:	490c      	ldr	r1, [pc, #48]	; (8000560 <__NVIC_SetPriority+0x4c>)
 800052e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000532:	0112      	lsls	r2, r2, #4
 8000534:	b2d2      	uxtb	r2, r2
 8000536:	440b      	add	r3, r1
 8000538:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800053c:	e00a      	b.n	8000554 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	b2da      	uxtb	r2, r3
 8000542:	4908      	ldr	r1, [pc, #32]	; (8000564 <__NVIC_SetPriority+0x50>)
 8000544:	79fb      	ldrb	r3, [r7, #7]
 8000546:	f003 030f 	and.w	r3, r3, #15
 800054a:	3b04      	subs	r3, #4
 800054c:	0112      	lsls	r2, r2, #4
 800054e:	b2d2      	uxtb	r2, r2
 8000550:	440b      	add	r3, r1
 8000552:	761a      	strb	r2, [r3, #24]
}
 8000554:	bf00      	nop
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	bc80      	pop	{r7}
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	e000e100 	.word	0xe000e100
 8000564:	e000ed00 	.word	0xe000ed00

08000568 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	3b01      	subs	r3, #1
 8000574:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000578:	d301      	bcc.n	800057e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800057a:	2301      	movs	r3, #1
 800057c:	e00f      	b.n	800059e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800057e:	4a0a      	ldr	r2, [pc, #40]	; (80005a8 <SysTick_Config+0x40>)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	3b01      	subs	r3, #1
 8000584:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000586:	210f      	movs	r1, #15
 8000588:	f04f 30ff 	mov.w	r0, #4294967295
 800058c:	f7ff ffc2 	bl	8000514 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000590:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <SysTick_Config+0x40>)
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000596:	4b04      	ldr	r3, [pc, #16]	; (80005a8 <SysTick_Config+0x40>)
 8000598:	2207      	movs	r2, #7
 800059a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800059c:	2300      	movs	r3, #0
}
 800059e:	4618      	mov	r0, r3
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	e000e010 	.word	0xe000e010

080005ac <Rcc_Init>:
void Rcc_Init(void);

/* Functions ------------------------------------------------------------------------------------------*/
/*********************************************************************************************************/
void Rcc_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
	__IO uint32_t tmpreg;

	// Enable AFIO clocking
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 80005b2:	4b43      	ldr	r3, [pc, #268]	; (80006c0 <Rcc_Init+0x114>)
 80005b4:	699b      	ldr	r3, [r3, #24]
 80005b6:	4a42      	ldr	r2, [pc, #264]	; (80006c0 <Rcc_Init+0x114>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	6193      	str	r3, [r2, #24]
	tmpreg = (RCC->APB2ENR & RCC_APB2ENR_AFIOEN);
 80005be:	4b40      	ldr	r3, [pc, #256]	; (80006c0 <Rcc_Init+0x114>)
 80005c0:	699b      	ldr	r3, [r3, #24]
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	607b      	str	r3, [r7, #4]
	(void)tmpreg;
 80005c8:	687b      	ldr	r3, [r7, #4]

	// Set flash latency
	FLASH->ACR &=~ FLASH_ACR_LATENCY;
 80005ca:	4b3e      	ldr	r3, [pc, #248]	; (80006c4 <Rcc_Init+0x118>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4a3d      	ldr	r2, [pc, #244]	; (80006c4 <Rcc_Init+0x118>)
 80005d0:	f023 0307 	bic.w	r3, r3, #7
 80005d4:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_LATENCY_1;
 80005d6:	4b3b      	ldr	r3, [pc, #236]	; (80006c4 <Rcc_Init+0x118>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a3a      	ldr	r2, [pc, #232]	; (80006c4 <Rcc_Init+0x118>)
 80005dc:	f043 0302 	orr.w	r3, r3, #2
 80005e0:	6013      	str	r3, [r2, #0]

	// Set bypass as HSE source and enable HSE
	RCC->CR |= RCC_CR_HSEBYP;
 80005e2:	4b37      	ldr	r3, [pc, #220]	; (80006c0 <Rcc_Init+0x114>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a36      	ldr	r2, [pc, #216]	; (80006c0 <Rcc_Init+0x114>)
 80005e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005ec:	6013      	str	r3, [r2, #0]
	RCC->CR |= RCC_CR_HSEON;
 80005ee:	4b34      	ldr	r3, [pc, #208]	; (80006c0 <Rcc_Init+0x114>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a33      	ldr	r2, [pc, #204]	; (80006c0 <Rcc_Init+0x114>)
 80005f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005f8:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSERDY));
 80005fa:	bf00      	nop
 80005fc:	4b30      	ldr	r3, [pc, #192]	; (80006c0 <Rcc_Init+0x114>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000604:	2b00      	cmp	r3, #0
 8000606:	d0f9      	beq.n	80005fc <Rcc_Init+0x50>

	// Set  and enable PLL
	RCC->CFGR &=~ (RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL);
 8000608:	4b2d      	ldr	r3, [pc, #180]	; (80006c0 <Rcc_Init+0x114>)
 800060a:	685b      	ldr	r3, [r3, #4]
 800060c:	4a2c      	ldr	r2, [pc, #176]	; (80006c0 <Rcc_Init+0x114>)
 800060e:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000612:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (RCC_CFGR_PLLSRC|RCC_CFGR_PLLMULL9);
 8000614:	4b2a      	ldr	r3, [pc, #168]	; (80006c0 <Rcc_Init+0x114>)
 8000616:	685b      	ldr	r3, [r3, #4]
 8000618:	4a29      	ldr	r2, [pc, #164]	; (80006c0 <Rcc_Init+0x114>)
 800061a:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 800061e:	6053      	str	r3, [r2, #4]
	RCC->CR |= RCC_CR_PLLON;
 8000620:	4b27      	ldr	r3, [pc, #156]	; (80006c0 <Rcc_Init+0x114>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a26      	ldr	r2, [pc, #152]	; (80006c0 <Rcc_Init+0x114>)
 8000626:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800062a:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_PLLRDY));
 800062c:	bf00      	nop
 800062e:	4b24      	ldr	r3, [pc, #144]	; (80006c0 <Rcc_Init+0x114>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000636:	2b00      	cmp	r3, #0
 8000638:	d0f9      	beq.n	800062e <Rcc_Init+0x82>

	// Set  AHB prescaler
	RCC->CFGR &=~ RCC_CFGR_HPRE;
 800063a:	4b21      	ldr	r3, [pc, #132]	; (80006c0 <Rcc_Init+0x114>)
 800063c:	685b      	ldr	r3, [r3, #4]
 800063e:	4a20      	ldr	r2, [pc, #128]	; (80006c0 <Rcc_Init+0x114>)
 8000640:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000644:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000646:	4b1e      	ldr	r3, [pc, #120]	; (80006c0 <Rcc_Init+0x114>)
 8000648:	4a1d      	ldr	r2, [pc, #116]	; (80006c0 <Rcc_Init+0x114>)
 800064a:	685b      	ldr	r3, [r3, #4]
 800064c:	6053      	str	r3, [r2, #4]

	// Set  APB1 prescaler
	RCC->CFGR &=~ RCC_CFGR_PPRE1;
 800064e:	4b1c      	ldr	r3, [pc, #112]	; (80006c0 <Rcc_Init+0x114>)
 8000650:	685b      	ldr	r3, [r3, #4]
 8000652:	4a1b      	ldr	r2, [pc, #108]	; (80006c0 <Rcc_Init+0x114>)
 8000654:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000658:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 800065a:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <Rcc_Init+0x114>)
 800065c:	685b      	ldr	r3, [r3, #4]
 800065e:	4a18      	ldr	r2, [pc, #96]	; (80006c0 <Rcc_Init+0x114>)
 8000660:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000664:	6053      	str	r3, [r2, #4]

	// Set  APB2 prescaler
	RCC->CFGR &=~ RCC_CFGR_PPRE2;
 8000666:	4b16      	ldr	r3, [pc, #88]	; (80006c0 <Rcc_Init+0x114>)
 8000668:	685b      	ldr	r3, [r3, #4]
 800066a:	4a15      	ldr	r2, [pc, #84]	; (80006c0 <Rcc_Init+0x114>)
 800066c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000670:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000672:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <Rcc_Init+0x114>)
 8000674:	4a12      	ldr	r2, [pc, #72]	; (80006c0 <Rcc_Init+0x114>)
 8000676:	685b      	ldr	r3, [r3, #4]
 8000678:	6053      	str	r3, [r2, #4]

	// Set  PLL as SYSCLK source
	RCC->CFGR &=~ RCC_CFGR_SW;
 800067a:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <Rcc_Init+0x114>)
 800067c:	685b      	ldr	r3, [r3, #4]
 800067e:	4a10      	ldr	r2, [pc, #64]	; (80006c0 <Rcc_Init+0x114>)
 8000680:	f023 0303 	bic.w	r3, r3, #3
 8000684:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000686:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <Rcc_Init+0x114>)
 8000688:	685b      	ldr	r3, [r3, #4]
 800068a:	4a0d      	ldr	r2, [pc, #52]	; (80006c0 <Rcc_Init+0x114>)
 800068c:	f043 0302 	orr.w	r3, r3, #2
 8000690:	6053      	str	r3, [r2, #4]
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8000692:	bf00      	nop
 8000694:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <Rcc_Init+0x114>)
 8000696:	685b      	ldr	r3, [r3, #4]
 8000698:	f003 030c 	and.w	r3, r3, #12
 800069c:	2b08      	cmp	r3, #8
 800069e:	d1f9      	bne.n	8000694 <Rcc_Init+0xe8>

	//	Update SystemCoreClock
	SystemCoreClockUpdate();
 80006a0:	f7ff fd88 	bl	80001b4 <SystemCoreClockUpdate>

	//	Set systick
	SysTick_Config(SystemCoreClock / 1000);
 80006a4:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <Rcc_Init+0x11c>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a08      	ldr	r2, [pc, #32]	; (80006cc <Rcc_Init+0x120>)
 80006aa:	fba2 2303 	umull	r2, r3, r2, r3
 80006ae:	099b      	lsrs	r3, r3, #6
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff ff59 	bl	8000568 <SysTick_Config>

}
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40021000 	.word	0x40021000
 80006c4:	40022000 	.word	0x40022000
 80006c8:	20000000 	.word	0x20000000
 80006cc:	10624dd3 	.word	0x10624dd3

080006d0 <__NVIC_GetPriorityGrouping>:
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006d4:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <__NVIC_GetPriorityGrouping+0x18>)
 80006d6:	68db      	ldr	r3, [r3, #12]
 80006d8:	0a1b      	lsrs	r3, r3, #8
 80006da:	f003 0307 	and.w	r3, r3, #7
}
 80006de:	4618      	mov	r0, r3
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bc80      	pop	{r7}
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <__NVIC_EnableIRQ>:
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	db0b      	blt.n	8000716 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	f003 021f 	and.w	r2, r3, #31
 8000704:	4906      	ldr	r1, [pc, #24]	; (8000720 <__NVIC_EnableIRQ+0x34>)
 8000706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070a:	095b      	lsrs	r3, r3, #5
 800070c:	2001      	movs	r0, #1
 800070e:	fa00 f202 	lsl.w	r2, r0, r2
 8000712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000716:	bf00      	nop
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr
 8000720:	e000e100 	.word	0xe000e100

08000724 <__NVIC_SetPriority>:
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	6039      	str	r1, [r7, #0]
 800072e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000734:	2b00      	cmp	r3, #0
 8000736:	db0a      	blt.n	800074e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	b2da      	uxtb	r2, r3
 800073c:	490c      	ldr	r1, [pc, #48]	; (8000770 <__NVIC_SetPriority+0x4c>)
 800073e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000742:	0112      	lsls	r2, r2, #4
 8000744:	b2d2      	uxtb	r2, r2
 8000746:	440b      	add	r3, r1
 8000748:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800074c:	e00a      	b.n	8000764 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	b2da      	uxtb	r2, r3
 8000752:	4908      	ldr	r1, [pc, #32]	; (8000774 <__NVIC_SetPriority+0x50>)
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	f003 030f 	and.w	r3, r3, #15
 800075a:	3b04      	subs	r3, #4
 800075c:	0112      	lsls	r2, r2, #4
 800075e:	b2d2      	uxtb	r2, r2
 8000760:	440b      	add	r3, r1
 8000762:	761a      	strb	r2, [r3, #24]
}
 8000764:	bf00      	nop
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	e000e100 	.word	0xe000e100
 8000774:	e000ed00 	.word	0xe000ed00

08000778 <NVIC_EncodePriority>:
{
 8000778:	b480      	push	{r7}
 800077a:	b089      	sub	sp, #36	; 0x24
 800077c:	af00      	add	r7, sp, #0
 800077e:	60f8      	str	r0, [r7, #12]
 8000780:	60b9      	str	r1, [r7, #8]
 8000782:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	f003 0307 	and.w	r3, r3, #7
 800078a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800078c:	69fb      	ldr	r3, [r7, #28]
 800078e:	f1c3 0307 	rsb	r3, r3, #7
 8000792:	2b04      	cmp	r3, #4
 8000794:	bf28      	it	cs
 8000796:	2304      	movcs	r3, #4
 8000798:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800079a:	69fb      	ldr	r3, [r7, #28]
 800079c:	3304      	adds	r3, #4
 800079e:	2b06      	cmp	r3, #6
 80007a0:	d902      	bls.n	80007a8 <NVIC_EncodePriority+0x30>
 80007a2:	69fb      	ldr	r3, [r7, #28]
 80007a4:	3b03      	subs	r3, #3
 80007a6:	e000      	b.n	80007aa <NVIC_EncodePriority+0x32>
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007ac:	f04f 32ff 	mov.w	r2, #4294967295
 80007b0:	69bb      	ldr	r3, [r7, #24]
 80007b2:	fa02 f303 	lsl.w	r3, r2, r3
 80007b6:	43da      	mvns	r2, r3
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	401a      	ands	r2, r3
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007c0:	f04f 31ff 	mov.w	r1, #4294967295
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ca:	43d9      	mvns	r1, r3
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d0:	4313      	orrs	r3, r2
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3724      	adds	r7, #36	; 0x24
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr

080007dc <Timer_Init>:
/*********************************************************************************************************/
__IO uint32_t vDelayTimerValue = 0;
/* Functions ------------------------------------------------------------------------------------------*/
/*********************************************************************************************************/
void Timer_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
	__IO uint32_t tmpreg;

	// Enable TIM1 clocking
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 80007e2:	4b2d      	ldr	r3, [pc, #180]	; (8000898 <Timer_Init+0xbc>)
 80007e4:	699b      	ldr	r3, [r3, #24]
 80007e6:	4a2c      	ldr	r2, [pc, #176]	; (8000898 <Timer_Init+0xbc>)
 80007e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007ec:	6193      	str	r3, [r2, #24]
	tmpreg = (RCC->APB2ENR & RCC_APB2ENR_TIM1EN);
 80007ee:	4b2a      	ldr	r3, [pc, #168]	; (8000898 <Timer_Init+0xbc>)
 80007f0:	699b      	ldr	r3, [r3, #24]
 80007f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80007f6:	607b      	str	r3, [r7, #4]
	(void)tmpreg;
 80007f8:	687b      	ldr	r3, [r7, #4]

	// Set priority grouping and enable TIM1_IRQ
	NVIC_SetPriority(TIM1_UP_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80007fa:	f7ff ff69 	bl	80006d0 <__NVIC_GetPriorityGrouping>
 80007fe:	4603      	mov	r3, r0
 8000800:	2200      	movs	r2, #0
 8000802:	2100      	movs	r1, #0
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff ffb7 	bl	8000778 <NVIC_EncodePriority>
 800080a:	4603      	mov	r3, r0
 800080c:	4619      	mov	r1, r3
 800080e:	2019      	movs	r0, #25
 8000810:	f7ff ff88 	bl	8000724 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000814:	2019      	movs	r0, #25
 8000816:	f7ff ff69 	bl	80006ec <__NVIC_EnableIRQ>

  // Set clock division, aligned mode, counter direction
	TIM1->CR1 &=~ (TIM_CR1_DIR | TIM_CR1_CMS | TIM_CR1_CKD);
 800081a:	4b20      	ldr	r3, [pc, #128]	; (800089c <Timer_Init+0xc0>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4a1f      	ldr	r2, [pc, #124]	; (800089c <Timer_Init+0xc0>)
 8000820:	f423 735c 	bic.w	r3, r3, #880	; 0x370
 8000824:	6013      	str	r3, [r2, #0]

	//  Set auto-reload value
	TIM1->ARR = 0x257UL;
 8000826:	4b1d      	ldr	r3, [pc, #116]	; (800089c <Timer_Init+0xc0>)
 8000828:	f240 2257 	movw	r2, #599	; 0x257
 800082c:	62da      	str	r2, [r3, #44]	; 0x2c

	//  Set prescaler value
	TIM1->PSC = 0x1C1FUL;
 800082e:	4b1b      	ldr	r3, [pc, #108]	; (800089c <Timer_Init+0xc0>)
 8000830:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000834:	629a      	str	r2, [r3, #40]	; 0x28

	//  Set repetition counter value
	TIM1->RCR = 0x00UL;
 8000836:	4b19      	ldr	r3, [pc, #100]	; (800089c <Timer_Init+0xc0>)
 8000838:	2200      	movs	r2, #0
 800083a:	631a      	str	r2, [r3, #48]	; 0x30

	//  Generates an update of the registers
	TIM1->EGR |= TIM_EGR_UG;
 800083c:	4b17      	ldr	r3, [pc, #92]	; (800089c <Timer_Init+0xc0>)
 800083e:	695b      	ldr	r3, [r3, #20]
 8000840:	4a16      	ldr	r2, [pc, #88]	; (800089c <Timer_Init+0xc0>)
 8000842:	f043 0301 	orr.w	r3, r3, #1
 8000846:	6153      	str	r3, [r2, #20]

	// Auto-reload preload disable
	TIM1->CR1 &=~ TIM_CR1_ARPE;
 8000848:	4b14      	ldr	r3, [pc, #80]	; (800089c <Timer_Init+0xc0>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a13      	ldr	r2, [pc, #76]	; (800089c <Timer_Init+0xc0>)
 800084e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000852:	6013      	str	r3, [r2, #0]

	// Set one pulse mode
	TIM1->CR1 &=~ TIM_CR1_OPM;
 8000854:	4b11      	ldr	r3, [pc, #68]	; (800089c <Timer_Init+0xc0>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a10      	ldr	r2, [pc, #64]	; (800089c <Timer_Init+0xc0>)
 800085a:	f023 0308 	bic.w	r3, r3, #8
 800085e:	6013      	str	r3, [r2, #0]
	TIM1->CR1 |= TIM_CR1_OPM;
 8000860:	4b0e      	ldr	r3, [pc, #56]	; (800089c <Timer_Init+0xc0>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a0d      	ldr	r2, [pc, #52]	; (800089c <Timer_Init+0xc0>)
 8000866:	f043 0308 	orr.w	r3, r3, #8
 800086a:	6013      	str	r3, [r2, #0]

	// The update event is selected as trigger output (TRGO)
	TIM1->CR2 &=~ TIM_CR2_MMS;
 800086c:	4b0b      	ldr	r3, [pc, #44]	; (800089c <Timer_Init+0xc0>)
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	4a0a      	ldr	r2, [pc, #40]	; (800089c <Timer_Init+0xc0>)
 8000872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000876:	6053      	str	r3, [r2, #4]
	TIM1->CR2 |= TIM_CR2_MMS_1;
 8000878:	4b08      	ldr	r3, [pc, #32]	; (800089c <Timer_Init+0xc0>)
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	4a07      	ldr	r2, [pc, #28]	; (800089c <Timer_Init+0xc0>)
 800087e:	f043 0320 	orr.w	r3, r3, #32
 8000882:	6053      	str	r3, [r2, #4]

	// Update interrupt enable
	TIM1->DIER |= TIM_DIER_UIE;
 8000884:	4b05      	ldr	r3, [pc, #20]	; (800089c <Timer_Init+0xc0>)
 8000886:	68db      	ldr	r3, [r3, #12]
 8000888:	4a04      	ldr	r2, [pc, #16]	; (800089c <Timer_Init+0xc0>)
 800088a:	f043 0301 	orr.w	r3, r3, #1
 800088e:	60d3      	str	r3, [r2, #12]

}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40021000 	.word	0x40021000
 800089c:	40012c00 	.word	0x40012c00

080008a0 <SysTick_Handler>:
/*******************************************/
/*******************************************/

//	SysTick interrupt handle
void SysTick_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
	vDelayTimerValue--;
 80008a4:	4b04      	ldr	r3, [pc, #16]	; (80008b8 <SysTick_Handler+0x18>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	3b01      	subs	r3, #1
 80008aa:	4a03      	ldr	r2, [pc, #12]	; (80008b8 <SysTick_Handler+0x18>)
 80008ac:	6013      	str	r3, [r2, #0]
}
 80008ae:	bf00      	nop
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bc80      	pop	{r7}
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	20000028 	.word	0x20000028

080008bc <BitRecive>:
#include "wigand.h"

/* Functions ----------------------------------------------------------------------------------*/
/***********************************************************************************************/
void BitRecive(uint8_t tape)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	71fb      	strb	r3, [r7, #7]
	// Check if previous byte package converting is finish
	if(vWigandStart)
 80008c6:	4b16      	ldr	r3, [pc, #88]	; (8000920 <BitRecive+0x64>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d00e      	beq.n	80008ee <BitRecive+0x32>
		{
			vWigandStart = 0; vBuffIndex = 0;
 80008d0:	4b13      	ldr	r3, [pc, #76]	; (8000920 <BitRecive+0x64>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	701a      	strb	r2, [r3, #0]
 80008d6:	4b13      	ldr	r3, [pc, #76]	; (8000924 <BitRecive+0x68>)
 80008d8:	2200      	movs	r2, #0
 80008da:	701a      	strb	r2, [r3, #0]
			vProcessing = 1;
 80008dc:	4b12      	ldr	r3, [pc, #72]	; (8000928 <BitRecive+0x6c>)
 80008de:	2201      	movs	r2, #1
 80008e0:	701a      	strb	r2, [r3, #0]
			// Start TIM1 сountdown to launch byte package converting
			TIM1->CR1 |= TIM_CR1_CEN;
 80008e2:	4b12      	ldr	r3, [pc, #72]	; (800092c <BitRecive+0x70>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4a11      	ldr	r2, [pc, #68]	; (800092c <BitRecive+0x70>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6013      	str	r3, [r2, #0]
		}

	// Write input bite to aWigandBuff while vProcessing == 1
	if(vProcessing)		aWigandBuff[vBuffIndex++] = (tape == DATA_0) ? 0:1;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <BitRecive+0x6c>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d00f      	beq.n	8000916 <BitRecive+0x5a>
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	bf14      	ite	ne
 80008fc:	2301      	movne	r3, #1
 80008fe:	2300      	moveq	r3, #0
 8000900:	b2d9      	uxtb	r1, r3
 8000902:	4b08      	ldr	r3, [pc, #32]	; (8000924 <BitRecive+0x68>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	b2db      	uxtb	r3, r3
 8000908:	1c5a      	adds	r2, r3, #1
 800090a:	b2d0      	uxtb	r0, r2
 800090c:	4a05      	ldr	r2, [pc, #20]	; (8000924 <BitRecive+0x68>)
 800090e:	7010      	strb	r0, [r2, #0]
 8000910:	461a      	mov	r2, r3
 8000912:	4b07      	ldr	r3, [pc, #28]	; (8000930 <BitRecive+0x74>)
 8000914:	5499      	strb	r1, [r3, r2]
}
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr
 8000920:	20000004 	.word	0x20000004
 8000924:	20000046 	.word	0x20000046
 8000928:	20000025 	.word	0x20000025
 800092c:	40012c00 	.word	0x40012c00
 8000930:	2000002c 	.word	0x2000002c

08000934 <BitePackageWaiting>:

/*--------------------------------------------------*/
/****************************************************/

void BitePackageWaiting(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
	//	 Waiting until vBitePackageReceipt flag is set
	while( ! vBitePackageReceipt);
 8000938:	bf00      	nop
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <BitePackageWaiting+0x28>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d0fb      	beq.n	800093a <BitePackageWaiting+0x6>

	// Wigand tipe check and parity value set
	if(WigandTapeCheck())
 8000942:	f000 f80d 	bl	8000960 <WigandTapeCheck>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d002      	beq.n	8000952 <BitePackageWaiting+0x1e>
	{
		WigandProcessing();
 800094c:	f000 f820 	bl	8000990 <WigandProcessing>
	}
	else
	{
		WigandTapeCheck_Error_Handler();
	}
}
 8000950:	e001      	b.n	8000956 <BitePackageWaiting+0x22>
		WigandTapeCheck_Error_Handler();
 8000952:	f000 f82d 	bl	80009b0 <WigandTapeCheck_Error_Handler>
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000024 	.word	0x20000024

08000960 <WigandTapeCheck>:

/*--------------------------------------------------*/
/****************************************************/
uint8_t WigandTapeCheck(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0

// This block allows you to add other wigand types
	switch(vBuffIndex)
 8000964:	4b08      	ldr	r3, [pc, #32]	; (8000988 <WigandTapeCheck+0x28>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	b2db      	uxtb	r3, r3
 800096a:	2b1a      	cmp	r3, #26
 800096c:	d104      	bne.n	8000978 <WigandTapeCheck+0x18>
		{
			case 26:
				vParity = PARITY_2;
 800096e:	4b07      	ldr	r3, [pc, #28]	; (800098c <WigandTapeCheck+0x2c>)
 8000970:	2202      	movs	r2, #2
 8000972:	701a      	strb	r2, [r3, #0]
							return 1;
 8000974:	2301      	movs	r3, #1
 8000976:	e003      	b.n	8000980 <WigandTapeCheck+0x20>
			/*case 40:
				vParity = PARITY_0;
							return 1;
								break;*/
			default:
				vParity = 0;
 8000978:	4b04      	ldr	r3, [pc, #16]	; (800098c <WigandTapeCheck+0x2c>)
 800097a:	2200      	movs	r2, #0
 800097c:	701a      	strb	r2, [r3, #0]
							return 0;
 800097e:	2300      	movs	r3, #0
		}
}
 8000980:	4618      	mov	r0, r3
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr
 8000988:	20000046 	.word	0x20000046
 800098c:	20000047 	.word	0x20000047

08000990 <WigandProcessing>:

/*--------------------------------------------------*/
/****************************************************/
void WigandProcessing(void)
	{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
		// Convert aWigandBuff UID to HEX format and send byte package.

	// Finishing convert and send byte package clear flags
		vWigandStart = 1;
 8000994:	4b04      	ldr	r3, [pc, #16]	; (80009a8 <WigandProcessing+0x18>)
 8000996:	2201      	movs	r2, #1
 8000998:	701a      	strb	r2, [r3, #0]
		vBitePackageReceipt = 0;
 800099a:	4b04      	ldr	r3, [pc, #16]	; (80009ac <WigandProcessing+0x1c>)
 800099c:	2200      	movs	r2, #0
 800099e:	701a      	strb	r2, [r3, #0]

		// Looping code (because it demo)
		BitePackageWaiting();
 80009a0:	f7ff ffc8 	bl	8000934 <BitePackageWaiting>
	}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20000004 	.word	0x20000004
 80009ac:	20000024 	.word	0x20000024

080009b0 <WigandTapeCheck_Error_Handler>:

/*--------------------------------------------------*/
/****************************************************/
void WigandTapeCheck_Error_Handler(void)
	{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
		// add your code here
	}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bc80      	pop	{r7}
 80009ba:	4770      	bx	lr

080009bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80009bc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80009be:	e003      	b.n	80009c8 <LoopCopyDataInit>

080009c0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80009c0:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80009c2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80009c4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80009c6:	3104      	adds	r1, #4

080009c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80009c8:	480a      	ldr	r0, [pc, #40]	; (80009f4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80009cc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80009ce:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80009d0:	d3f6      	bcc.n	80009c0 <CopyDataInit>
  ldr r2, =_sbss
 80009d2:	4a0a      	ldr	r2, [pc, #40]	; (80009fc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80009d4:	e002      	b.n	80009dc <LoopFillZerobss>

080009d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80009d6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80009d8:	f842 3b04 	str.w	r3, [r2], #4

080009dc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80009dc:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80009de:	429a      	cmp	r2, r3
  bcc FillZerobss
 80009e0:	d3f9      	bcc.n	80009d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009e2:	f7ff fbb3 	bl	800014c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009e6:	f000 f80f 	bl	8000a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ea:	f7ff fd41 	bl	8000470 <main>
  bx lr
 80009ee:	4770      	bx	lr
  ldr r3, =_sidata
 80009f0:	08000a80 	.word	0x08000a80
  ldr r0, =_sdata
 80009f4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80009f8:	20000008 	.word	0x20000008
  ldr r2, =_sbss
 80009fc:	20000008 	.word	0x20000008
  ldr r3, = _ebss
 8000a00:	20000048 	.word	0x20000048

08000a04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a04:	e7fe      	b.n	8000a04 <ADC1_2_IRQHandler>
	...

08000a08 <__libc_init_array>:
 8000a08:	b570      	push	{r4, r5, r6, lr}
 8000a0a:	2500      	movs	r5, #0
 8000a0c:	4e0c      	ldr	r6, [pc, #48]	; (8000a40 <__libc_init_array+0x38>)
 8000a0e:	4c0d      	ldr	r4, [pc, #52]	; (8000a44 <__libc_init_array+0x3c>)
 8000a10:	1ba4      	subs	r4, r4, r6
 8000a12:	10a4      	asrs	r4, r4, #2
 8000a14:	42a5      	cmp	r5, r4
 8000a16:	d109      	bne.n	8000a2c <__libc_init_array+0x24>
 8000a18:	f000 f81a 	bl	8000a50 <_init>
 8000a1c:	2500      	movs	r5, #0
 8000a1e:	4e0a      	ldr	r6, [pc, #40]	; (8000a48 <__libc_init_array+0x40>)
 8000a20:	4c0a      	ldr	r4, [pc, #40]	; (8000a4c <__libc_init_array+0x44>)
 8000a22:	1ba4      	subs	r4, r4, r6
 8000a24:	10a4      	asrs	r4, r4, #2
 8000a26:	42a5      	cmp	r5, r4
 8000a28:	d105      	bne.n	8000a36 <__libc_init_array+0x2e>
 8000a2a:	bd70      	pop	{r4, r5, r6, pc}
 8000a2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a30:	4798      	blx	r3
 8000a32:	3501      	adds	r5, #1
 8000a34:	e7ee      	b.n	8000a14 <__libc_init_array+0xc>
 8000a36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a3a:	4798      	blx	r3
 8000a3c:	3501      	adds	r5, #1
 8000a3e:	e7f2      	b.n	8000a26 <__libc_init_array+0x1e>
 8000a40:	08000a78 	.word	0x08000a78
 8000a44:	08000a78 	.word	0x08000a78
 8000a48:	08000a78 	.word	0x08000a78
 8000a4c:	08000a7c 	.word	0x08000a7c

08000a50 <_init>:
 8000a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a52:	bf00      	nop
 8000a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a56:	bc08      	pop	{r3}
 8000a58:	469e      	mov	lr, r3
 8000a5a:	4770      	bx	lr

08000a5c <_fini>:
 8000a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a5e:	bf00      	nop
 8000a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a62:	bc08      	pop	{r3}
 8000a64:	469e      	mov	lr, r3
 8000a66:	4770      	bx	lr
